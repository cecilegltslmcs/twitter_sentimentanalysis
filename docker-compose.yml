version: '3.9'

networks:
  kafkazoo:
    driver: bridge

services:
    zookeeper:
        image: zookeeper:latest
        restart: always
        hostname: zookeeper
        networks:
        - kafkazoo
        ports:
           - 2181:2181

    kafka:
    # Verified images from Docker Hub: https://hub.docker.com/r/bitnami/kafka
        image: bitnami/kafka:latest
        networks:
        - kafkazoo
        ports:
           - 9092:9092
        volumes:
           - ./kafka_components/logs:/bitnami/kafka
        hostname: kafka
        environment:
           - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
           - ALLOW_PLAINTEXT_LISTENER=yes
           - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
           - KAFKA_BROKER_ID=0
           - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT
           - KAFKA_CFG_LISTENERS=CLIENT://:9092
           - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092
           - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
        depends_on:
           - zookeeper
    
    kafka-consummer-app:
        container_name:  kafka_consummer_app
        build: 
            context: ./kafka_components
            dockerfile: Dockerfile_kafka_app
        networks:
        - kafkazoo
        depends_on:
        - kafka

    spark:
        container_name: spark
        build:
            context: .
            dockerfile: app/Dockerfile_app

    mongodb:
    # Official images from Docker Hub: https://hub.docker.com/_/mongo 
         container_name: mongo
         image: mongo
         restart: always
         ports:
             - 27017:27017
         environment:
             MONGO_INITDB_ROOT_USERNAME: root
             MONGO_INITDB_ROOT_PASSWORD: example

    streamlit:
        container_name: streamlit
        build:
            context: .
            dockerfile: dashboard/Dockerfile_dashboard
        ports:
            - 80:80

volumes:
    zookeeper_data:
        driver: local
    kafka_data:
        driver: local